-- script inside of StableMenuGui
-- Created by hunxrepair
-- 2018/11/01


local Player = game.Players.LocalPlayer
local OrigSize = script.Parent:WaitForChild("Frame").Size
script.Parent.Frame.Size = UDim2.new(0, 0, 0, 0)

function Clear()
	for i,v in pairs(script.Parent.Frame.HorseList:GetChildren()) do
		if v:IsA("TextButton") then
			v:Destroy()
		end
	end
end


function Load()
	Clear()
	
	for i,HorseValue in pairs(script.Parent.BuildingReference.Value.Settings.Horses:GetChildren()) do
		local NewButton = script:WaitForChild("SpawnButton"):Clone()
		NewButton.Text = "Spawn ".. HorseValue.Name
		
		NewButton.MouseButton1Click:Connect(function()
			Player.PlayerSounds.Click:Play()
			local Status = game.ReplicatedStorage.NetCommunications.SpawnHorse:InvokeServer(Player.NPCNAME.Value, HorseValue.Name, script.Parent.BuildingReference.Value)
			
			if Status == true then
				CloseGui()
			end
		end)
		
		NewButton.Parent = script.Parent.Frame.HorseList
	end
end



Load()


function OpenGui()
	local NewTween = game:GetService("TweenService"):Create(script.Parent.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = OrigSize})
	NewTween:Play()
end
OpenGui()
function CloseGui()
	if script.Parent:FindFirstChild("Frame") == nil then return end
	require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(script.Parent, 3)
	
	local NewTween = game:GetService("TweenService"):Create(script.Parent.Frame, TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(script.Parent.Frame.Size.X.Scale * 1.25, 0, script.Parent.Frame.Size.Y.Scale * 1.25, 0)})
	NewTween:Play()
	NewTween.Completed:wait()
	local NewTween = game:GetService("TweenService"):Create(script.Parent.Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Size = UDim2.new(0.05, 0, 0.05, 0)})
	NewTween:Play()
	NewTween.Completed:wait()
	script.Parent.Frame:Destroy()
end


-- Exit the gui
script.Parent.Frame.ExitButton.MouseButton1Click:Connect(function()
	Player.PlayerSounds.Click:Play()
	CloseGui()
end)

-- Wants to upgrade the building
script.Parent.Frame.UpgradeButton.MouseButton1Click:Connect(function()
	game.Players.LocalPlayer.PlayerSounds.Click:Play()
	CloseGui()
	game.ReplicatedStorage.NetCommunications.UpgradeRequest:FireServer(game.Players.LocalPlayer.NPCNAME.Value, script.Parent.BuildingReference.Value)
end)


local OrigPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
local HRP = game.Players.LocalPlayer.Character.HumanoidRootPart

while wait(0.2) do
	if (HRP.Position - OrigPos).Magnitude > 7 then
		CloseGui()
		break
	end
end


--  ScriptImporter for NPC items
game.ServerStorage.Storage.Scripts.SoldierItemsWeld:Clone().Parent = script.Parent
require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(script, 1)

--ScriptImporter for player items
-- pickaxe
game.ServerStorage.Storage.Scripts.PickManager:Clone().Parent = script.Parent
script:Destroy()
-- axe
game.ServerStorage.Storage.Scripts.AxeManager:Clone().Parent = script.Parent
script:Destroy()
-- sword
game.ServerStorage.Storage.Scripts.SwordScript:Clone().Parent = script.Parent
script:Destroy()
-- Hammer
game.ServerStorage.Storage.Scripts.HammerManager:Clone().Parent = script.Parent
script:Destroy()

-- potion script for player ( improve this to where it heals overtime and a particle emits from you when you drink it with an animation that plays when you do drink it.)
wait(1)
local Player = game.Players.LocalPlayer repeat wait() until Player.Character
local Character = Player.Character repeat wait() until Character:FindFirstChild("Humanoid")
local Humanoid = Character.Humanoid
local Tool = script.Parent
local UIS = game:GetService("UserInputService")
local IsEquipped = false

repeat wait() until Humanoid:IsDescendantOf(game.Workspace)
local Anim = Humanoid:LoadAnimation(script.Parent.Handle.PotionDrinking)


function KeyDown(KeyPressed)
	if IsEquipped and KeyPressed.UserInputType == Enum.UserInputType.MouseButton1 or KeyPressed.UserInputType == Enum.UserInputType.Touch then		
		Drink()
	end
end

KeyPressedEvent = UIS.InputBegan:Connect(KeyDown)


local PotionClone = script.Parent.Handle:Clone()
PotionClone.Anchored = false
PotionClone.CanCollide = true


local IsDrinking = false
function StartFinish()
	script.Parent.Handle.Transparency = 0.5
	Anim:Stop()
	script.Parent.Handle.Drink:Stop()
	IsDrinking = false
end




function Drink()
	
	if IsDrinking == false then
		IsDrinking = true
		Anim:Play()	
		
			for w = 1, 20 do
				if not IsEquipped then
					StartFinish()
					return
				end
				wait(0.65/20)
			end
			
			script.Parent.Handle.Drink:Play()
			wait()
			for w = 1, 20 do
				if not IsEquipped then
					StartFinish()
					return
				end
				wait(1.32/20)
			end
			
				local NewPotionClone = PotionClone:Clone()
				NewPotionClone.Position = Tool.Handle.Position + Vector3.new(0, 1, 0)
				NewPotionClone.Velocity = (Tool.Handle.CFrame * CFrame.Angles(0, 1.3, 0)).lookVector * 40
				NewPotionClone.Parent = game.Workspace
				require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(NewPotionClone, 10)
				script.Parent.Handle.GlassBreak:Play()
				script.Parent.Handle.Transparency = 1
	
			for w = 1, 20 do
				if not IsEquipped then
					StartFinish()
					return
				end
				wait(1.03/20)
			end
			
			game.ReplicatedStorage.NetCommunications.PotionHeal:FireServer(game.Players.LocalPlayer.NPCNAME.Value, Character)
			
			wait(20)
			script.Parent.Handle.Transparency = 0
		IsDrinking = false
	end -- IsDrinking end
end -- Funciton end
 




Tool.Equipped:Connect(function()
	IsEquipped = true
end)

Tool.Unequipped:Connect(function()
	IsEquipped = false
end)



-- script in ReplicatedStorage
-- ReplicatedUtilities 

local M = {}


		
-- Creates a private message for a user
function M.CreateMessage(Player, BoxType, TitleMessage, Message, Timer, YesEventName, YesArgs, NoEventName, NoArgs)		
	local NewBox = script.Box:Clone()
	NewBox.Configs.BoxType.Value = BoxType or "Alert"
	NewBox.Configs.TitleMessage.Value = TitleMessage
	NewBox.Configs.Message.Value = Message
	NewBox.Configs.Timer.Value = Timer
	NewBox.Configs.YesEventName.Value = YesEventName or ""
	NewBox.Configs.YesEventName.Args.Value = YesArgs and game:GetService("HttpService"):JSONEncode(YesArgs) or ""
	NewBox.Configs.NoEventName.Value = NoEventName or ""
	NewBox.Configs.NoEventName.Args.Value = NoArgs and game:GetService("HttpService"):JSONEncode(NoArgs) or ""
	
	NewBox.Parent = Player.PlayerGui
	require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(NewBox, 60)
end

-- Snaps a position to a customisable grid
function M.SnapPosition(ConvertPos, Grid)
	local function MathFloor(Num, Grid)
		return Num - Num%Grid
	end
	local function MathCeil(Num, Grid)
		return Num + (Grid - (Num%Grid))
	end
	
	local Positions = {"X", "Y", "Z"}
	local NewPos = {"X", "Y", "Z"}
	
	
	for i,Pos in pairs(Positions) do
		if ConvertPos[Pos] >= 0 then
			if ConvertPos[Pos] - MathFloor(ConvertPos[Pos], Grid[Pos]) >= Grid[Pos]/2 then
				NewPos[Pos] = MathCeil(ConvertPos[Pos], Grid[Pos])
			else
				NewPos[Pos] = MathFloor(ConvertPos[Pos], Grid[Pos])
			end
			
		else
			if ConvertPos[Pos] - MathCeil(ConvertPos[Pos], Grid[Pos]) <= -Grid[Pos]/2 then
				NewPos[Pos] = MathFloor(ConvertPos[Pos], Grid[Pos])
			else
				NewPos[Pos] = MathCeil(ConvertPos[Pos], Grid[Pos])
			end
		end
	end
	
	return Vector3.new(NewPos["X"], NewPos["Y"], NewPos["Z"])
end



-- Checks if the AI, player hit something.
function M.CheckAlivity(Hit)
	if Hit:IsDescendantOf(game.Workspace.TribeAreas.Wanderers) == false then
		if Hit.Parent.ClassName == "Model" then
			if Hit.Parent.PrimaryPart then
				if Hit.Parent.PrimaryPart.Name == "HumanoidRootPart" then
					if Hit.Parent.Parent:IsA("BoolValue") then
						return Hit.Parent, "Npc"
					else
						return Hit.Parent, "Player"
					end
				elseif Hit:IsDescendantOf(game.Workspace.TribeAreas) and Hit.Parent:FindFirstChild("Stats") then
					return Hit.Parent, "Building"
				end
			end
			
		elseif Hit.Parent.Parent.ClassName == "Model" then
			if Hit.Parent.Parent.PrimaryPart then
				if Hit.Parent.Parent.PrimaryPart.Name == "HumanoidRootPart" then
					if Hit.Parent.Parent.Parent:IsA("BoolValue") then
						return Hit.Parent.Parent, "Npc"
					else
						return Hit.Parent.Parent, "Player"
					end
				elseif Hit:IsDescendantOf(game.Workspace.TribeAreas) and Hit.Parent.Parent:FindFirstChild("Stats") then
					return Hit.Parent.Parent, "Building"
				end
			end
		end
	end
	
	return nil, ""
end



function M.PlaySound(ID, Part, Volume)
	delay(0, function()
		local Sound = Instance.new("Sound")
		require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(Sound, 300)
		Sound.SoundId = "rbxassetid://"..ID
		Sound.Parent = Part
		Sound:Play()
		for w = 1, 10 do
			wait(1)
			if Sound.IsLoaded then break end
		end
		require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(Sound, Sound.TimeLength)
	end)
end




	
-- Model is the model that you want to render onto the GUI
-- ModelPos is a custom position you want to set your model to, if not leave at nil and it will be 0, 0, 0
-- CamPos is the position of the camera
-- Type is the type of rendering you want. Normal, Spin
function M.ModelToGui(GuiObject, Model, ModelPos, CamPos, Type)
	-- Creating the camera object
	local NewCam = Instance.new("Camera")
	GuiObject.CurrentCamera = NewCam
	Model = Model:Clone()
	Model.Name = "RenderingModel"
	
	-- Moving the model to 0, 0, 0
	local Offsets = {}
	local PrimaryPart = Model.PrimaryPart
	
	if PrimaryPart then
		for i,Part in pairs(Model:GetDescendants()) do
			if Part:IsA("Script") then
				Part:Destroy()
			elseif Part:IsA("BasePart") and Part ~= PrimaryPart then
				table.insert(Offsets, {Part, PrimaryPart.CFrame:ToObjectSpace(Part.CFrame)})
			end
		end
		PrimaryPart.Position = ModelPos or Vector3.new(0, 0, 0)
		for i,PartData in pairs(Offsets) do
			PartData[1].CFrame = PrimaryPart.CFrame * PartData[2]
		end

		NewCam.CFrame = PrimaryPart.CFrame * CamPos
		
		
		-- Just a normal render, no spinning or something
		if Type == "Normal" then
			Model.Parent = NewCam
			
		-- Spinning the render
		elseif Type == "Spin" then
			Model.Parent = NewCam
			
			delay(0, function()
				while NewCam and NewCam.Parent ~= nil do
					PrimaryPart.CFrame = PrimaryPart.CFrame * CFrame.Angles(0, math.rad(2), 0)
					
					for i,PartData in pairs(Offsets) do
						PartData[1].CFrame = PrimaryPart.CFrame * PartData[2]
					end
					
					wait()
				end
			end)
		end
	end
	
	NewCam.Parent = GuiObject
	return NewCam
end

function M.ShowBoundary(Player, BoxSize)
	local CentrePosition = game.Workspace.TribeAreas[Player.Team.Name][Player.Team.Name.."Spawn"].Position
	local GridLine = game.ReplicatedStorage.Storage.Objects.GridLine
	
	local NewLine = GridLine:Clone()
	NewLine.Size = Vector3.new(0.1, 0.5, BoxSize)
	NewLine.Position = CentrePosition + Vector3.new(BoxSize/2, 0, 0)
	NewLine.Parent = Player.Character
	
	local NewLine = GridLine:Clone()
	NewLine.Size = Vector3.new(0.1, 0.5, BoxSize)
	NewLine.Position = CentrePosition + Vector3.new(-BoxSize/2, 0, 0)
	NewLine.Parent = Player.Character
	
	local NewLine = GridLine:Clone()
	NewLine.Size = Vector3.new(BoxSize, 0.5, 0.1)
	NewLine.Position = CentrePosition + Vector3.new(0, 0, BoxSize/2)
	NewLine.Parent = Player.Character
	
	local NewLine = GridLine:Clone()
	NewLine.Size = Vector3.new(BoxSize, 0.5, 0.1)
	NewLine.Position = CentrePosition + Vector3.new(0, 0, -BoxSize/2)
	NewLine.Parent = Player.Character
end

function M.HideBoundary(Player)
	for i,v in pairs(Player.Character:GetChildren()) do
		if v.Name == "GridLine" then
			v:Destroy()
		end
	end
end

function M.BoundaryCheck(CentrePos, BoxSize, MaterialPos)
	if MaterialPos.X < CentrePos.X + BoxSize/2 and MaterialPos.X > CentrePos.X - BoxSize/2 then
		if MaterialPos.Y < CentrePos.Y + BoxSize/2 and MaterialPos.Y > CentrePos.Y - BoxSize/2 then
			if MaterialPos.Z < CentrePos.Z + BoxSize/2 and MaterialPos.Z > CentrePos.Z - BoxSize/2 then
				return true
			end
		end
	end
	
	return false
end



-- Can't have a new thread running, since if the script that called the module is destroyed, then this thread is disconnected too
function M.DebrisAddItem(Obj, Time)
	local F = Instance.new("Folder")
	local ObjValue = Instance.new("ObjectValue")
	ObjValue.Name = "Object"
	ObjValue.Value = Obj
	ObjValue.Parent = F
	
	local TimeValue = Instance.new("NumberValue")
	TimeValue.Name = "Time"
	TimeValue.Value = Time
	TimeValue.Parent = F
	
	F.Parent = game.ReplicatedStorage.Debris
end



return M

-- Script inside replicatedutilities, box
-- Boxmanager
local Configs = script.Parent:WaitForChild("Configs")
local Frame = script.Parent:WaitForChild("MainFrame")
Frame.Position = UDim2.new(0.35, 0, -0.3, 0)
local Player = game.Players.LocalPlayer
Player:WaitForChild("PlayerSounds"):WaitForChild("Notification2"):Play()

wait()
for i,Box in pairs(Player.PlayerGui:GetChildren()) do
	if Box.Name == "Box" and Box ~= script.Parent then
		if Box.Configs.Message.Value == Configs:WaitForChild("Message").Value then
			script.Parent:Destroy()
			return
		end
	end
end

-- Wait until another box has been removed
local Boxes = {}
for i,v in pairs(Player.PlayerGui:GetChildren()) do
	if v.Name == "Box" and v ~= script.Parent then
		table.insert(Boxes, v)
	end
end
while true do
	for i,v in pairs(Boxes) do
		if v.Parent == nil then
			table.remove(Boxes, i)
			break
		end
	end
	
	-- The rest of the boxes are removed
	if #Boxes == 0 then
		break
	end
	wait(0.25)
end


if Configs:WaitForChild("BoxType").Value == "Alert" then
	Frame:WaitForChild("NoButton"):Destroy()
	Frame:WaitForChild("YesButton").Size = UDim2.new(1, 0, 0.2, 0)
	Frame:WaitForChild("YesButton").Text = "Okay"
	
	Frame:WaitForChild("YesButton").MouseButton1Click:Connect(function()
		game.Players.LocalPlayer:WaitForChild("PlayerSounds").Click:Play()
		Close()
	end)
	
elseif Configs:WaitForChild("BoxType").Value == "Confirm" then
	Frame:WaitForChild("YesButton").MouseButton1Click:Connect(function()
		game.Players.LocalPlayer:WaitForChild("PlayerSounds").Click:Play()
		if Configs:WaitForChild("YesEventName").Value ~= "" then
			if game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("YesEventName").Value]:IsA("RemoteEvent") then
				game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("YesEventName").Value]:FireServer(game.Players.LocalPlayer.NPCNAME.Value, Configs:WaitForChild("YesEventName").Args.Value)
			else
				game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("YesEventName").Value]:InvokeServer(game.Players.LocalPlayer.NPCNAME.Value, Configs:WaitForChild("YesEventName").Args.Value)
			end
			Close()
		end
	end)
	
	Frame:WaitForChild("NoButton").MouseButton1Click:Connect(function()
		game.Players.LocalPlayer:WaitForChild("PlayerSounds").Click:Play()
		if Configs:WaitForChild("NoEventName").Value ~= "" then
			if game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("NoEventName").Value]:IsA("RemoteEvent") then
				game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("NoEventName").Value]:FireServer(game.Players.LocalPlayer.NPCNAME.Value, Configs:WaitForChild("NoEventName").Args.Value)
			else
				game.ReplicatedStorage.NetCommunications[Configs:WaitForChild("NoEventName").Value]:InvokeServer(game.Players.LocalPlayer.NPCNAME.Value, Configs:WaitForChild("NoEventName").Args.Value)
			end
		end
		Close()
	end)
end


Frame:WaitForChild("Title").Text = Configs:WaitForChild("TitleMessage").Value
Frame:WaitForChild("Message").Text = Configs:WaitForChild("Message").Value


function Open()
	Frame:TweenPosition(UDim2.new(0.35, 0, 0, 0), "Out", "Quad", 0.3, false)
end

function Close()
	Frame:TweenPosition(UDim2.new(0.35, 0, -0.3, 0), "In", "Quad", 0.15, false)
	require(game.ReplicatedStorage.ReplicatedUtilities).DebrisAddItem(script.Parent, 0.1)
end

Open()


if Configs:WaitForChild("Timer").Value > 0 then
	Frame:WaitForChild("Timer").Visible = true
	Frame:WaitForChild("Timer").Text = Configs:WaitForChild("Timer").Value
	
	local Mouse = game.Players.LocalPlayer:GetMouse()
	local MinTimeDecrease, MaxTimeIncrease, CurrentTime = 1, 5, 1
	
	
	delay(0, function()
		while script.Parent do
			
			-- It's inside the box, so let's slow down time.
			if Mouse.X > Frame.AbsolutePosition.X and Mouse.X < Frame.AbsolutePosition.X + Frame.AbsoluteSize.X and Mouse.Y > Frame.AbsolutePosition.Y and Mouse.Y < Frame.AbsolutePosition.Y + Frame.AbsoluteSize.Y then
				CurrentTime = CurrentTime + 0.1
				if CurrentTime > MaxTimeIncrease then
					CurrentTime = MaxTimeIncrease
				end
				
			else -- It's outside the box, so let's increase the time.
				CurrentTime = CurrentTime - 0.1
				if CurrentTime < MinTimeDecrease then
					CurrentTime = MinTimeDecrease
				end
			end
			
			wait()
		end
	end)
	
	-- Divide it, so that the transition seems smooth
	for w = Configs:WaitForChild("Timer").Value, 0, -1/10 do
		wait(CurrentTime/10)
		Frame:WaitForChild("Timer").Text = math.floor(w * 10)/10
	end
	
	Close()
end
